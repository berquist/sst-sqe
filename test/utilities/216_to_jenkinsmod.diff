diff --git a/shunit2-2.1.6-JenkinsMod/README.wiki b/shunit2-2.1.6-JenkinsMod/README.wiki
new file mode 100644
index 0000000..468426a
--- /dev/null
+++ b/shunit2-2.1.6-JenkinsMod/README.wiki
@@ -0,0 +1,82 @@
+#summary General information regarding the shUnit2 project.
+#labels Featured
+
+= Project Info =
+<wiki:toc max_depth="2" />
+
+== Overview ==
+[http://sourceforge.net/projects/shunit2 shUnit2] is a [http://en.wikipedia.org/wiki/XUnit xUnit] unit test framework for Bourne based shell scripts, and it is designed to work in a similar manner to [http://www.junit.org/ JUnit], [http://pyunit.sourceforge.net/ PyUnit], etc. If you have ever had the desire to write a unit test for a shell script, shUnit2 can do the job.
+
+shUnit2 was originally developed to provide a consistent testing solution for [http://log4sh.sourceforge.net/ log4sh], a shell based logging framework similar to [http://logging.apache.org/log4j/ log4j]. During the development of that product, I repeatedly ran into the problem of having things work just fine under one shell (`/bin/bash` on Linux to be specific), and then not working under another shell (`/bin/sh` on Solaris). Although I had some simple tests that I ran, I finally decided to develop a more robust unit test framework after releasing multiple brown-bag releases.
+
+Rather than reinvent the wheel again, I chose to base the shUnit2 framework as much as possible on JUnit. I wanted something that was both incredibly easy to use, but that was as well incredibly powerful. I knew that the code would be built only for log4sh at the start, but hoped that someday I could release the code as a separate project. Now that the code is stable and mature enough, I have done just that. 
+
+You might ask why I didn't just use the already existing [http://shunit.sourceforge.net/ ShUnit] product. I took a look at it, but wasn't really happy with how it worked or how little it reflected the way JUnit and other unit test frameworks function. As such, I figured that it was probably better just to write my own.
+
+shUnit2 has been developed under the Bourne Again Shell (`/bin/bash`) on Linux, but _great care_ has been taken to make sure it works under the other Unix shells to insure maximum compatibility. If you like what you see, or have any suggestions on improvements, please feel free to drop me an email.
+
+_Supported Operating Systems_
+  * [http://www.cygwin.com/ Cygwin] (under Microsoft Windows XP)
+  * [http://www.freebsd.org/ FreeBSD] (user supported)
+  * Linux ([http://www.ubuntu.com/ Ubuntu])
+  * [http://www.apple.com/macosx/ Mac OS X]
+  * [http://www.sun.com/software/solaris/ Solaris] 8-10 and [http://www.opensolaris.org/ OpenSolaris]
+
+_Tested Shells_
+  * Bourne Shell (*`sh`*)
+  * [http://www.gnu.org/software/bash/ BASH] – GNU Bourne Again SHell (*`bash`*)
+  * [http://gondor.apana.org.au/~herbert/dash/ DASH] (*`dash`*)
+  * [http://www.kornshell.com/ Korn Shell] (*`ksh`*)
+  * [http://web.cs.mun.ca/~michael/pdksh/ pdksh] – the Public Domain Korn Shell (*`pdksh`*)
+  * [http://www.zsh.org/ Zsh] - (*`zsh`*)
+
+== Downloading ==
+There are two current release series of shUnit2 available. The 2.0 series is the stable release, and it contains only bug fixes. The 2.1 series is meant for new features and is still under active development. The 2.1 series of shUnit2 has its own set of unit tests, and should be considered fine for daily use.
+
+If you would like to verify the GPG signatures of the releases, please take a look at my [http://forestent.com/wiki/Info:GnuPG GnuPG Info] page.
+
+=== 2.0.x - Stable Releases ===
+|| *Release* || *Date* ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.0.3.tgz 2.0.3] || Thu Jul 12 2007 ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.0.2.tgz 2.0.2] || Mon Apr 23 2007 ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.0.1.tgz 2.0.1] || Wed Feb 21 2007 ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.0.0.tgz 2.0.0] || Mon Feb 19 2007 ||
+
+=== 2.1.x - Development Releases ===
+|| *Release* || *Date* || *Known Issues* ||
+|| [http://shunit2.googlecode.com/files/shunit2-2.1.6.tgz 2.1.6] || Sun May 1 2011 || ||
+|| [http://shunit2.googlecode.com/files/shunit2-2.1.5.tgz 2.1.5] || Wed Oct 29 2008 || ||
+|| [http://shunit2.googlecode.com/files/shunit2-2.1.4.tgz 2.1.4] || Fri Jul 11 2008 || ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.1.3.tgz 2.1.3] || Sun May 10 2008 || Doesn't work with *`zsh`* versions prior to 4.0. ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.1.2.tgz 2.1.2] || Mon Dec 31 2007 || ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.1.1.tgz 2.1.1] || Fri Jul 13 2007 || ||
+|| [http://downloads.sourceforge.net/shunit2/shunit2-2.1.0.tgz 2.1.0] || Mon Apr 23 2007 || ||
+
+== Support ==
+
+=== Documentation ===
+HTML documentation is also included in the `doc` directory of each distribution. Links to the latest version in Subversion are provided below.
+
+[http://shunit2.googlecode.com/svn/trunk/source/2.0/doc/shunit2.html 2.0] ·
+[http://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html 2.1]
+
+You might also be interested in our GeneralFaq page.
+
+=== Examples ===
+One case study for writing a function to convert a relative path to an absolute path ([http://code.google.com/p/shunit2/wiki/HOWTO_TestAbsolutePathFn HOWTO_TestAbsolutePathFn]).
+
+Starting with the 2.1.x series, additional examples are included with the source code in the `examples` directory.
+  * `mkdir_test.sh` – demonstration of testing an existing Unix command (e.g. an already written shell script)
+
+=== Mailing Lists ===
+A [mailto:shunit2-users@googlegroups.com shunit2-users@googlegroups.com] mailing list now exists. Everyone is free to [http://groups.google.com/group/shunit2-users/topics view the discussions] or to subscribe.
+
+== Miscellaneous ==
+
+=== Licensing ===
+shUnit2 is licensed under the GNU [http://www.gnu.org/licenses/lgpl.html Lesser General Public License] (LGPL). The contents and copyright of this site and all provided source code are owned by [http://www.linkedin.com/pub/0/9b9/111 Kate Ward].
+
+=== Thanks ===
+A list of contributors is provided with each release (found as `doc/contributors.txt`). Many thanks go out to each of these individuals for finding bugs and/or providing patches.
+
+Hosting resources are gracefully provided by [http://code.google.com/ Google Code].
\ No newline at end of file
diff --git a/shunit2-2.1.6/bin/which b/shunit2-2.1.6-JenkinsMod/bin/which
index 4eefe74..9d7cc9f 100755
--- a/shunit2-2.1.6/bin/which
+++ b/shunit2-2.1.6-JenkinsMod/bin/which
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: which 12 2007-02-18 03:31:14Z sfsetse $
+# $Id$
 #
 # This is a simple implementation of the 'which' command for those OSes that
 # don't have one.
diff --git a/shunit2-2.1.6/doc/CHANGES-2.1.txt b/shunit2-2.1.6-JenkinsMod/doc/CHANGES-2.1.txt
index 14764b1..0ab860d 100644
--- a/shunit2-2.1.6/doc/CHANGES-2.1.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/CHANGES-2.1.txt
@@ -210,5 +210,5 @@ The report output format was changed to include the percentage for each test
 result, rather than just those successful.
 
 
-.. $Revision: 326 $
+.. $Revision$
 .. vim:fileencoding=latin1:ft=text:spell:tw=80
diff --git a/shunit2-2.1.6/doc/README.txt b/shunit2-2.1.6-JenkinsMod/doc/README.txt
index 2d8d534..c6ac429 100644
--- a/shunit2-2.1.6/doc/README.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/README.txt
@@ -211,4 +211,4 @@ reStructuredText:
 .. http://docutils.sourceforge.net/
 ..
 .. vim:fileencoding=latin1:ft=rst:spell:tw=80
-.. $Revision: 310 $
+.. $Revision$
diff --git a/shunit2-2.1.6/doc/RELEASE_NOTES-2.1.0.txt b/shunit2-2.1.6-JenkinsMod/doc/RELEASE_NOTES-2.1.0.txt
index 9aba387..c99f746 100644
--- a/shunit2-2.1.6/doc/RELEASE_NOTES-2.1.0.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/RELEASE_NOTES-2.1.0.txt
@@ -100,5 +100,5 @@ Known Bugs and Issues
 None.
 
 
-.. $Revision: 273 $
+.. $Revision$
 .. vim:fileencoding=latin1:spell:syntax=rst:textwidth=80
diff --git a/shunit2-2.1.6/doc/TODO.txt b/shunit2-2.1.6-JenkinsMod/doc/TODO.txt
index f917cee..cecc17d 100644
--- a/shunit2-2.1.6/doc/TODO.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/TODO.txt
@@ -10,4 +10,4 @@ problem showed up.
 assertTrue() just gives 'ASSERT:', nothing else :-(. others too?
 upd: assertNull() will give message passed, but nothing else useful :-(
 
-$Revision: 228 $
+$Revision$
diff --git a/shunit2-2.1.6/doc/coding_standards.txt b/shunit2-2.1.6-JenkinsMod/doc/coding_standards.txt
index 651f40d..e5dee4f 100644
--- a/shunit2-2.1.6/doc/coding_standards.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/coding_standards.txt
@@ -71,4 +71,4 @@ standard spacing of two characters. Tabs may *not* be used. ::
   done
 
 .. vim:fileencoding=latin1:ft=rst:spell:tw=80
-.. $Revision: 301 $
+.. $Revision$
diff --git a/shunit2-2.1.6/doc/contributors.txt b/shunit2-2.1.6-JenkinsMod/doc/contributors.txt
index 97c7d09..7623c66 100644
--- a/shunit2-2.1.6/doc/contributors.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/contributors.txt
@@ -11,4 +11,4 @@ Rob Holland
 Rocky Bernstein
 wood4321 (of code.google.com)
 
-$Revision: 313 $
+$Revision$
diff --git a/shunit2-2.1.6/doc/design_doc.txt b/shunit2-2.1.6-JenkinsMod/doc/design_doc.txt
index 7ac8002..24d41ff 100644
--- a/shunit2-2.1.6/doc/design_doc.txt
+++ b/shunit2-2.1.6-JenkinsMod/doc/design_doc.txt
@@ -31,4 +31,4 @@ Programatic Standards:
   reduce the chances that a variable in a shUnit public function, or a variable
   outside of shUnit will be overridden.
 
-$Revision: 4 $
+$Revision$
diff --git a/shunit2-2.1.6/src/shunit2 b/shunit2-2.1.6-JenkinsMod/src/shunit2
index a315d6f..97a0b0b 100755
--- a/shunit2-2.1.6/src/shunit2
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2 335 2011-05-01 20:10:33Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
@@ -21,13 +21,70 @@ SHUNIT_VERSION='2.1.6'
 SHUNIT_TRUE=0
 SHUNIT_FALSE=1
 SHUNIT_ERROR=2
+SHUNIT_EXIT_NOW=0
 
 # enable strict mode by default
 SHUNIT_STRICT=${SHUNIT_STRICT:-${SHUNIT_TRUE}}
 
-_shunit_warn() { echo "shunit2:WARN $@" >&2; }
-_shunit_error() { echo "shunit2:ERROR $@" >&2; }
-_shunit_fatal() { echo "shunit2:FATAL $@" >&2; exit ${SHUNIT_ERROR}; }
+# Output to stdout
+SHUNIT_STDOUT=${SHUNIT_STDOUT:-${SHUNIT_TRUE}}
+
+# Include environment
+SHUNIT_INCLUDE_ENV=${SHUNIT_INCLUDE_ENV:-${SHUNIT_TRUE}}
+### ADDED BY ALevine STARTING HERE - Force  SHUNIT_INCLUDE_ENV to equal SHUNIT_FALSE
+###                                  Prevents output of environment into XML file 
+###                                  which possibly generates malformed XML syntax.
+SHUNIT_INCLUDE_ENV=${SHUNIT_FALSE}
+### ADDED BY ALevine ENDING HERE  
+
+# Maximum failed tests before quit
+SHUNIT_MAX_FAIL_TESTS=${SHUNIT_MAX_FAIL_TESTS:-10}
+
+# Maximum number of tests to run from a Suite
+SHUNIT_MAX_TEST_COUNT=${SHUNIT_MAX_TEST_COUNT:-0}
+
+#_shunit_warn() { echo "shunit2:WARN $@" >&2; }
+#_shunit_error() { echo "shunit2:ERROR $@" >&2; }
+#_shunit_fatal() { echo "shunit2:FATAL $@" >&2; exit ${SHUNIT_ERROR}; }
+
+#
+# some convenient log functions
+#
+
+# log an expected failure into the test case error buffer
+_shunit_log_fail()
+{
+  _shunit_msg_=$1
+
+###  __shunit_case_errors="${__shunit_case_errors}<failure type=\"${__SHUNIT_ASSERT_MSG_PREFIX}\" message=\"$( echo "${_shunit_msg_}" | sed 's/</&lg;/g;s/>/&gt;/g' )\"/>"  ### MODIFIED BY ALevine - Force Each Failure msg to be on a separate line in XML 
+  __shunit_case_errors="${__shunit_case_errors}
+      <failure type=\"${__SHUNIT_ASSERT_MSG_PREFIX}\" message=\"$( echo "${_shunit_msg_}" | sed 's/</&lg;/g;s/>/&gt;/g' )\"></failure>"
+
+  unset _shunit_msg_
+}
+
+# log an unexpected failure into the test case error buffer
+_shunit_log_error() 
+{
+  _level_=$1
+  shift
+
+  __shunit_case_errors="${__shunit_case_errors}<error type=\"${_level_}\">$@</error>";
+
+  unset _level_
+}
+
+_shunit_warn() { _shunit_log_error "WARN" $@; echo "shunit2:WARN $@" >&2; }
+_shunit_error() { _shunit_log_error "ERROR" $@; echo "shunit2:ERROR $@" >&2; }
+_shunit_fatal() { _shunit_log_error "FATAL" $@; echo "shunit2:FATAL $@" >&2; exit ${SHUNIT_ERROR}; }
+
+# fake exit call to prevent scripts to echo escape prematurely
+wrapped_exit()
+{
+  [ $SHUNIT_EXIT_NOW -eq 1 ] || echo "exit builtin called with rc $1"
+}
+trap wrapped_exit EXIT
+
 
 # specific shell checks
 if [ -n "${ZSH_VERSION:-}" ]; then
@@ -45,7 +102,8 @@ fi
 # constants
 #
 
-__SHUNIT_ASSERT_MSG_PREFIX='ASSERT:'
+__SHUNIT_ASSERT_MSG_PREFIX='shunit.ASSERT'
+#__SHUNIT_ASSERT_MSG_PREFIX='ASSERT:'
 __SHUNIT_MODE_SOURCED='sourced'
 __SHUNIT_MODE_STANDALONE='standalone'
 __SHUNIT_PARENT=${SHUNIT_PARENT:-$0}
@@ -72,18 +130,27 @@ __shunit_reportGenerated=${SHUNIT_FALSE}  # is report generated
 __shunit_script=''  # filename of unittest script (standalone mode)
 __shunit_skip=${SHUNIT_FALSE}  # is skipping enabled
 __shunit_suite=''  # suite of tests to execute
+__shunit_suite_name=''
+__shunit_cases=''
+__shunit_case_errors=''
+__shunit_case_skips=''
+__shunit_system_out=''
+__shunit_system_err=''
+__shunit_this_test_skipped=${SHUNIT_FALSE}  # Individual test skipped by Suite
 
 # counts of tests
 __shunit_testSuccess=${SHUNIT_TRUE}
 __shunit_testsTotal=0
 __shunit_testsPassed=0
 __shunit_testsFailed=0
+__shunit_testsSkipped=0
 
 # counts of asserts
 __shunit_assertsTotal=0
 __shunit_assertsPassed=0
 __shunit_assertsFailed=0
 __shunit_assertsSkipped=0
+__shunit_assertsError=0
 
 # macros
 _SHUNIT_LINENO_='eval __shunit_lineno=""; if [ "${1:-}" = "--lineno" ]; then [ -n "$2" ] && __shunit_lineno="[$2] "; shift 2; fi'
@@ -104,8 +171,9 @@ assertEquals()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "assertEquals() requires two or three arguments; $# given"
-    _shunit_error "1: ${1:+$1} 2: ${2:+$2} 3: ${3:+$3}${4:+ 4: $4}"
+#    _shunit_error "assertEquals() requires two or three arguments; $# given"
+#    _shunit_error "1: ${1:+$1} 2: ${2:+$2} 3: ${3:+$3}${4:+ 4: $4}"
+    _shunit_assertError "assertEquals() requires two or three arguments; $# given 1: ${1:+$1} 2: ${2:+$2} 3: ${3:+$3}"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -143,7 +211,8 @@ assertNotEquals()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "assertNotEquals() requires two or three arguments; $# given"
+#    _shunit_error "assertNotEquals() requires two or three arguments; $# given"
+    _shunit_assertError "assertNotEquals() requires two or three arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -180,7 +249,8 @@ assertNull()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 1 -o $# -gt 2 ]; then
-    _shunit_error "assertNull() requires one or two arguments; $# given"
+#    _shunit_error "assertNull() requires one or two arguments; $# given"
+    _shunit_assertError "assertNull() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -209,7 +279,8 @@ assertNotNull()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -gt 2 ]; then  # allowing 0 arguments as $1 might actually be null
-    _shunit_error "assertNotNull() requires one or two arguments; $# given"
+#    _shunit_error "assertNotNull() requires one or two arguments; $# given"
+    _shunit_assertError "assertNotNull() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -241,7 +312,8 @@ assertSame()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "assertSame() requires two or three arguments; $# given"
+#    _shunit_error "assertSame() requires two or three arguments; $# given"
+    _shunit_assertError "assertSame() requires two or three arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -271,7 +343,8 @@ assertNotSame()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "assertNotSame() requires two or three arguments; $# given"
+#    _shunit_error "assertNotSame() requires two or three arguments; $# given"
+    _shunit_assertError "assertNotSame() requires two or three arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -314,7 +387,8 @@ assertTrue()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -gt 2 ]; then
-    _shunit_error "assertTrue() takes one two arguments; $# given"
+#    _shunit_error "assertTrue() takes one two arguments; $# given"
+    _shunit_assertError "assertTrue() takes one two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -379,7 +453,8 @@ assertFalse()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 1 -o $# -gt 2 ]; then
-    _shunit_error "assertFalse() quires one or two arguments; $# given"
+#    _shunit_error "assertFalse() quires one or two arguments; $# given"
+    _shunit_assertError "assertFalse() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -419,6 +494,19 @@ assertFalse()
 }
 _ASSERT_FALSE_='eval assertFalse --lineno "${LINENO:-}"'
 
+#-----------------------------------------------------------------------------
+# Skip one test by request from test Suite
+ 
+#
+# Args:
+#    none
+# Returns:
+#    none
+skip_this_test()
+{
+  __shunit_this_test_skipped=${SHUNIT_TRUE}
+}
+
 #-----------------------------------------------------------------------------
 # failure functions
 #
@@ -433,7 +521,8 @@ fail()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -gt 1 ]; then
-    _shunit_error "fail() requires zero or one arguments; $# given"
+#    _shunit_error "fail() requires zero or one arguments; $# given"
+    _shunit_assertError "fail() requires zero or one arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -463,7 +552,8 @@ failNotEquals()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "failNotEquals() requires one or two arguments; $# given"
+#    _shunit_error "failNotEquals() requires one or two arguments; $# given"
+    _shunit_assertError "failNotEquals() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -476,7 +566,9 @@ failNotEquals()
   shunit_expected_=$1
   shunit_actual_=$2
 
-  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected:<${shunit_expected_}> but was:<${shunit_actual_}>"
+###  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected:<${shunit_expected_}> but was:<${shunit_actual_}>"   ### MODIFIED BY ALevine - '<' and '>' were causing problems in SHUNIT Parsing
+  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected: ${shunit_expected_} but was: ${shunit_actual_}"
+#  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected:&lt;${shunit_unexpected_}&gt; but was:&lt;${shunit_actual_}&gt;"
 
   unset shunit_message_ shunit_expected_ shunit_actual_
   return ${SHUNIT_FALSE}
@@ -495,7 +587,8 @@ failSame()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "failSame() requires two or three arguments; $# given"
+#    _shunit_error "failSame() requires two or three arguments; $# given"
+    _shunit_assertError "failSame() requires two or three arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -505,8 +598,13 @@ failSame()
     shunit_message_="${shunit_message_}$1"
     shift
   fi
+### ADDED BY ALevine STARTING HERE - Missing assignment of vars  
+  shunit_expected_=$1
+  shunit_actual_=$2
+### ADDED BY ALevine ENDING HERE  
 
-  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected not same"
+###  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected not same"  ### MODIFIED BY ALevine - Cleaned up message a bit to make more readable
+  _shunit_assertFail "${shunit_message_:+${shunit_message_} }expected ${shunit_expected_} not different than ${shunit_actual_}"
 
   unset shunit_message_
   return ${SHUNIT_FALSE}
@@ -527,7 +625,8 @@ failNotSame()
 {
   ${_SHUNIT_LINENO_}
   if [ $# -lt 2 -o $# -gt 3 ]; then
-    _shunit_error "failNotEquals() requires one or two arguments; $# given"
+#    _shunit_error "failNotEquals() requires one or two arguments; $# given"
+    _shunit_assertError "failNotEquals() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
@@ -758,46 +857,193 @@ _shunit_cleanup()
     # add 128 to signal and exit
     exit `expr ${_shunit_signal_} + 128`
   elif [ ${__shunit_reportGenerated} -eq ${SHUNIT_FALSE} ] ; then
-    _shunit_assertFail 'Unknown failure encountered running a test'
-    _shunit_generateReport
-    exit ${SHUNIT_ERROR}
+#    _shunit_assertFail 'Unknown failure encountered running a test'
+#    _shunit_generateFinalReport
+#    exit ${SHUNIT_ERROR}
+
+    #########################
+    ### MODIFIED BY ALevine - Added code to generate a failure, and force output 
+    ### to the xml to work correctly with Jenkins.  Lastly shut down any timeout 
+    ### monitors
+    
+    ### First Force a failure
+    _shunit_assertFail "Unknown failure encountered while running Test Suite [${__shunit_suite_name}]; Script abnomally exited"
+    
+    ### Perform a setup of the __shunit_cases variable due to the error, this 
+    ### is normally done at end of _shunit_execSuite(), but abnormal exit prevents
+    ### __shunit_cases from being populated properly so we have to do it here.
+    ### Once __shunit_cases is properly populated, then we can call _shunit_generateFinalReport().
+    _shunit_generateTestCaseReport
+    
+    ### Since Test Script aborted, the output no output was generated; and the 
+    ### files were not populated.  So add some general gunk to give the  
+    ### _shunit_generateFinalReport() to chew on. 
+    __shunit_system_out=$(mktemp -u 'shunit-out.XXXX')
+    __shunit_system_err=$(mktemp -u 'shunit-err.XXXX')
+    echo "Unknown failure encountered while running Test Suite [${__shunit_suite_name}]; Script abnomally exited" >  $__shunit_system_out
+    echo "Unknown failure encountered while running Test Suite [${__shunit_suite_name}]; Script abnomally exited" >  $__shunit_system_err
+
+    ### Generate the XML report before we generate the final assert error 
+    _shunit_generateFinalReport
+    
+    ### Since the Test aborted, we may still have the timelimitenforcer.sh 
+    ### running, so we try to shut it down.
+    _kill_timeLimitEnforcer
+    
+    ### MODIFIED BY ALevine - Done with code additions
+    #########################
+    
+    _shunit_assertError "Unknown failure encountered while running Test Suite [${__shunit_suite_name}]; Script abnomally exited"
   fi
 
   unset _shunit_name_ _shunit_signal_
 }
 
+# Kill the Time Limit Enforcer (if possible).
+#
+# Args:
+#   None
+_kill_timeLimitEnforcer()
+{
+    __grandChild=`(unset LD_LIBRARY_PATH DYLD_LIBRARY_PATH; ps -ef -u $USER) | awk '{ if ( $3 == ENVIRON["__timerChild"] ) print $2 }'`
+#    echo Sleep child is $__grandChild   
+    (unset LD_LIBRARY_PATH DYLD_LIBRARY_PATH;ps -p $__timerChild) > /dev/null && kill $__timerChild $__grandChild
+}
+
 # The actual running of the tests happens here.
 #
 # Args:
 #   None
 _shunit_execSuite()
 {
-  for _shunit_test_ in ${__shunit_suite}; do
+  
+  # loop over test cases
+  for _shunit_case_ in ${__shunit_suite}; do
     __shunit_testSuccess=${SHUNIT_TRUE}
 
+    # reset test cases errors buffer
+    __shunit_case_errors=''
+    
+    # reset test cases skips buffer
+    __shunit_case_skips=''
+
     # disable skipping
     endSkipping
 
+    # Clear the flag that says that this test should be skipped 
+    __shunit_this_test_skipped=${SHUNIT_FALSE}
+
     # execute the per-test setup function
     setUp
 
-    # execute the test
-    echo "         -------"
-    echo "${_shunit_test_}"
-    eval ${_shunit_test_}
+    # store the test case execution start time
+###    _shunit_case_starttime_=$(date '+%s.%N')  ### MODIFIED BY ALevine - %N is not portable to MacOS
+    _shunit_case_starttime_=$(date '+%s')
 
-    # execute the per-test tear-down function
+    # Setup to execute the test Case
+    echo "         -------"
+    echo "${_shunit_case_}"
+    
+    # Start the Time Limit Monitor
+    $SST_TEST_UTILITIES/timeLimitEnforcer.sh $$ ${_shunit_case_} & 
+    export __timerChild=$!
+#    echo started child $__timerChild
+
+    ## Execute the Test Case
+    eval ${_shunit_case_}
+    
+    #test done,  Remove timer (and its sleeping child), if still running
+    _kill_timeLimitEnforcer
+
+    # Check to see if this Test Case internally decided to skip
+    if [ ${__shunit_this_test_skipped} -eq ${SHUNIT_TRUE} ] ; then
+      _shunit_assertSkip
+    fi
+    
+    # Generate the Test Case report
+    _shunit_generateTestCaseReport
+    
+    # Update the Total Number of tests
+    __shunit_testsTotal=`expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}`
+    
+    # Execute the per-test tear-down function
     tearDown
 
+    # Check to see if this Test Case was skipped, if so, stop any additonal Stats processing 
+    if [ ${__shunit_this_test_skipped} -eq ${SHUNIT_TRUE} ] ; then
+      continue
+    fi
+    
     # update stats
     if [ ${__shunit_testSuccess} -eq ${SHUNIT_TRUE} ]; then
       __shunit_testsPassed=`expr ${__shunit_testsPassed} + 1`
     else
       __shunit_testsFailed=`expr ${__shunit_testsFailed} + 1`
     fi
+    
+    # Check for Test Fail limits
+    if [ ${__shunit_testsFailed} -ge ${SHUNIT_MAX_FAIL_TESTS} ] ; then
+      echo " **************************************" ; echo " "
+      echo " **** TERMINATED after ${SHUNIT_MAX_FAIL_TESTS} failures ****"
+      echo " " ;echo " **************************************" ; echo " "
+      __shunit_testsTotal=`expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}`
+      break;
+    fi
+    if [ ${SHUNIT_MAX_TEST_COUNT} -ne 0 -a `expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}` -ge ${SHUNIT_MAX_TEST_COUNT} ] 
+    then
+      echo "Only ${SHUNIT_MAX_TEST_COUNT} tests requested  \"\$SHUNIT_MAX_TEST_COUNT\""
+      __shunit_testsTotal=`expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}`
+      break;
+    fi
   done
 
-  unset _shunit_test_
+  # Update the Total Number of tests
+  __shunit_testsTotal=`expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}`
+  
+#  unset _shunit_test_
+  unset _shunit_case_
+}
+
+
+# Generates the xml structure of the testcases
+#
+# Args:
+#   None
+# Output:
+#   variable ${__shunit_cases} updated
+_shunit_generateTestCaseReport()
+{
+    ### NOTE: Formatting of the XML output is tricky, be careful of changes...
+    # store the test case execution end time and duration
+    _shunit_case_endtime_=$(date '+%s')
+    _shunit_case_duration_=$(echo ${_shunit_case_endtime_} - ${_shunit_case_starttime_} | bc)
+
+    # Output test case Element and Attributes
+    if [ -n "${__shunit_case_skips}" ]
+    then
+      __shunit_cases="${__shunit_cases}
+    <testcase name=\"${_shunit_case_}\" classname=\"${__shunit_pkg_name}.${__shunit_suite_name}\" status=\"skipped\" time=\"${_shunit_case_duration_}\">"
+    else
+      __shunit_cases="${__shunit_cases}
+    <testcase name=\"${_shunit_case_}\" classname=\"${__shunit_pkg_name}.${__shunit_suite_name}\" status=\"run\" time=\"${_shunit_case_duration_}\">"
+    fi
+    
+    # Output any Failures (Errors) as sub-elements
+    if [ -n "${__shunit_case_errors}" ]
+    then
+      __shunit_cases="${__shunit_cases}${__shunit_case_errors}"
+    fi
+   
+    # Output any Skips as sub-elements
+    if [ -n "${__shunit_case_skips}" ]
+    then
+      __shunit_cases="${__shunit_cases}${__shunit_case_skips}"
+    fi
+    
+    # Finally close out the test case Element
+    __shunit_cases="${__shunit_cases}
+    </testcase>
+    "
 }
 
 # Generates the user friendly report with appropriate OK/FAILED message.
@@ -806,42 +1052,84 @@ _shunit_execSuite()
 #   None
 # Output:
 #   string: the report of successful and failed tests, as well as totals.
-_shunit_generateReport()
+_shunit_generateFinalReport()
 {
+
   _shunit_ok_=${SHUNIT_TRUE}
+  _shunit_failures_=${__shunit_assertsFailed}
+  _shunit_skipped_=${__shunit_assertsSkipped}
+  _shunit_errors_=${__shunit_assertsError}
+  __shunit_testsTotal=`expr ${__shunit_testsFailed} + ${__shunit_testsPassed} + ${__shunit_testsSkipped}`
+
+#  # if no exit code was provided one, determine an appropriate one
+#  [ ${__shunit_testsFailed} -gt 0 \
+#      -o ${__shunit_testSuccess} -eq ${SHUNIT_FALSE} ] \
+#          && _shunit_ok_=${SHUNIT_FALSE}
+
+  if [ -n "${SHUNIT_OUTPUTDIR:-}" ]; then
+###    cat << EOF >> "${SHUNIT_OUTPUTDIR}/TEST-${__shunit_suite_name}.xml"  ### MODIFIED BY ALevine - To overwrite xml not append to it 
+    touch ${__shunit_system_err}   ## Get rid of "cat of noexistent file message"
+    cat << EOF > "${SHUNIT_OUTPUTDIR}/TEST-${__shunit_suite_name}.xml"
+<?xml version="1.0" encoding="UTF-8"?>
+<testsuites name="${__shunit_pkg_name}">
+  <testsuite name="${__shunit_suite_name}" tests="${__shunit_testsTotal}" failures="${_shunit_failures_}" skipped="${_shunit_skipped_}" errors="${_shunit_errors_}" hostname="$(hostname)" time="${__shunit_suite_duration}" timestamp="${__shunit_suite_timestamp}">
+    ${__shunit_cases}
+    <properties>${_shunit_env_}</properties>
+    <system-out><![CDATA[$(cat ${__shunit_system_out} | sed 's/</&lg;/g;s/>/&gt;/g')]]></system-out>
+    <system-err><![CDATA[$(cat ${__shunit_system_err} | sed 's/</&lg;/g;s/>/&gt;/g')]]></system-err>
+  </testsuite>
+</testsuites>
+EOF
 
-  # if no exit code was provided one, determine an appropriate one
-  [ ${__shunit_testsFailed} -gt 0 \
-      -o ${__shunit_testSuccess} -eq ${SHUNIT_FALSE} ] \
-          && _shunit_ok_=${SHUNIT_FALSE}
+    ### ADDED CODE STARTING HERE - ALevine
+    ##  - ADDED CODE TO OUTPUT SOME STATISTIC INFO FOR SST RUNS SINCE WHEN USING
+    ##    NEW SHUNIT2 OPERATION (enabled by setting variable SHUNIT_OUTPUTDIR) 
+    ##    WILL PREVENT difftoxml.pl FROM RUNNING AND OUTPUTING THE STATS
+    echo "Report from shunit2":
+    echo "===================================================================================================="
+    echo "${__shunit_suite_name}: ran ${__shunit_testsTotal} tests, passed ${__shunit_testsPassed}; skipped ${_shunit_skipped_} and found ${_shunit_failures_} failures"
+    echo "----------------------------------------------------------------------------------------------------"
+    echo "Testcase Results:";
+    echo "${__shunit_cases}"
+    ### ADDED CODE ENDING HERE - ALevine
 
-  echo
-  if [ ${__shunit_testsTotal} -eq 1 ]; then
-    echo "Ran ${__shunit_testsTotal} test."
-  else
-    echo "Ran ${__shunit_testsTotal} tests."
   fi
-
-  _shunit_failures_=''
-  _shunit_skipped_=''
-  [ ${__shunit_assertsFailed} -gt 0 ] \
-      && _shunit_failures_="failures=${__shunit_assertsFailed}"
-  [ ${__shunit_assertsSkipped} -gt 0 ] \
-      && _shunit_skipped_="skipped=${__shunit_assertsSkipped}"
-
-  if [ ${_shunit_ok_} -eq ${SHUNIT_TRUE} ]; then
-    _shunit_msg_='OK'
-    [ -n "${_shunit_skipped_}" ] \
-        && _shunit_msg_="${_shunit_msg_} (${_shunit_skipped_})"
-  else
-    _shunit_msg_="FAILED (${_shunit_failures_}"
-    [ -n "${_shunit_skipped_}" ] \
-        && _shunit_msg_="${_shunit_msg_},${_shunit_skipped_}"
-    _shunit_msg_="${_shunit_msg_})"
+  
+  if [ ${SHUNIT_STDOUT} -eq ${SHUNIT_TRUE} ]; then
+    echo
+    if [ ${__shunit_testsTotal} -eq 1 ]; then
+      echo "Ran ${__shunit_testsTotal} test."
+    else
+      echo "Ran ${__shunit_testsTotal} tests."
+    fi
   fi
 
-  echo
-  echo ${_shunit_msg_}
+  # cleanup buffer files
+  rm -f ${__shunit_system_out}
+  rm -f ${__shunit_system_err}
+
+  if [ ${SHUNIT_STDOUT} -eq ${SHUNIT_TRUE} ]; then
+    _shunit_failures_=''
+    _shunit_skipped_=''
+    [ ${__shunit_assertsFailed} -gt 0 ] \
+        && _shunit_failures_="failures=${__shunit_assertsFailed}"
+    [ ${__shunit_assertsSkipped} -gt 0 ] \
+        && _shunit_skipped_="skipped=${__shunit_assertsSkipped}"
+
+    if [ ${_shunit_ok_} -eq ${SHUNIT_TRUE} ]; then
+      _shunit_msg_='OK'
+      [ -n "${_shunit_skipped_}" ] \
+          && _shunit_msg_="${_shunit_msg_} (${_shunit_skipped_})"
+    else
+      _shunit_msg_="FAILED (${_shunit_failures_}"
+      [ -n "${_shunit_skipped_}" ] \
+          && _shunit_msg_="${_shunit_msg_},${_shunit_skipped_}"
+      _shunit_msg_="${_shunit_msg_})"
+    fi
+
+    echo
+    echo ${_shunit_msg_}
+  fi
   __shunit_reportGenerated=${SHUNIT_TRUE}
 
   unset _shunit_failures_ _shunit_msg_ _shunit_ok_ _shunit_skipped_
@@ -851,7 +1139,7 @@ _shunit_generateReport()
 #
 # Args:
 #   None
-# Returns
+# Returns:
 #   boolean: whether the test should be skipped (TRUE/FALSE constant)
 _shunit_shouldSkip()
 {
@@ -880,7 +1168,11 @@ _shunit_assertFail()
   __shunit_testSuccess=${SHUNIT_FALSE}
   __shunit_assertsFailed=`expr ${__shunit_assertsFailed} + 1`
   __shunit_assertsTotal=`expr ${__shunit_assertsTotal} + 1`
-  echo "${__SHUNIT_ASSERT_MSG_PREFIX}${_shunit_msg_}"
+  [ ${SHUNIT_STDOUT} -eq ${SHUNIT_TRUE} ] && echo "${__SHUNIT_ASSERT_MSG_PREFIX}: ${_shunit_msg_}"
+
+###  __shunit_case_errors="${__shunit_case_errors}<failure type=\"${__SHUNIT_ASSERT_MSG_PREFIX}\" message=\"$(echo "${_shunit_msg_}" | sed 's/</&lg;/g;s/>/&gt;/g')\"/>"    ### MODIFIED BY ALevine - Force Each Failure msg to be on a separate line in XML
+  __shunit_case_errors="${__shunit_case_errors}
+      <failure type=\"${__SHUNIT_ASSERT_MSG_PREFIX}\" message=\"$(echo "${_shunit_msg_}" | sed 's/</&lg;/g;s/>/&gt;/g')\"></failure>"
 
   unset _shunit_msg_
 }
@@ -891,10 +1183,29 @@ _shunit_assertFail()
 #   None
 _shunit_assertSkip()
 {
+
   __shunit_assertsSkipped=`expr ${__shunit_assertsSkipped} + 1`
   __shunit_assertsTotal=`expr ${__shunit_assertsTotal} + 1`
+  __shunit_testsSkipped=`expr ${__shunit_testsSkipped} + 1`
+
+  __shunit_case_skips="${__shunit_case_skipped}
+      <skipped></skipped>"
 }
 
+
+_shunit_assertError()
+{
+  _shunit_msg_=$1
+
+  __shunit_assertsError=`expr ${__shunit_assertsError} + 1`
+  __shunit_assertsTotal=`expr ${__shunit_assertsTotal} + 1`
+  _shunit_error "${__SHUNIT_ASSERT_MSG_PREFIX}: $(echo "${_shunit_msg_}" | sed 's/</&lg;/g;s/>/&gt;/g')"
+
+  unset _shunit_msg_
+}
+
+
+
 # Prepare a script filename for sourcing.
 #
 # Args:
@@ -1019,12 +1330,29 @@ if [ "${__shunit_mode}" = "${__SHUNIT_MODE_STANDALONE}" ]; then
   . "`_shunit_prepForSourcing \"${__shunit_script}\"`"
 fi
 
+#  for _shunit_test_ in ${__shunit_suite}; do
+# create buffer files for stdout and stderr
+
+__shunit_system_out=$(mktemp -u 'shunit-out.XXXX')
+__shunit_system_err=$(mktemp -u 'shunit-err.XXXX')
+
+# Get the Package Name (We get it from the Jenkins Environment)
+__shunit_pkg_name=${JOB_NAME}    # Get project name from Jenkins
+if [ -z "${__shunit_pkg_name}" ]  # If no Jenkins project name, then create a default one
+then
+    __shunit_pkg_name="NonJenkinsRun"
+fi
+
+# alter file descriptors
+#exec 6>&1 7>&2
+#exec >> ${__shunit_system_out} 2>> ${__shunit_system_err}
+
 # execute the oneTimeSetUp function (if it exists)
-oneTimeSetUp
+oneTimeSetUp #| tee -a ${__shunit_system_out} 2>&1
 
 # execute the suite function defined in the parent test script
 # deprecated as of 2.1.0
-suite
+suite #| tee -a ${__shunit_system_out} 2>&1
 
 # if no suite function was defined, dynamically build a list of functions
 if [ -z "${__shunit_suite}" ]; then
@@ -1035,19 +1363,40 @@ if [ -z "${__shunit_suite}" ]; then
 fi
 unset shunit_func_ shunit_funcs_
 
+# get test suite name
+__shunit_suite_name=$(basename $0 | sed 's/\..*$//')
+
+# get environment
+if [ ${SHUNIT_INCLUDE_ENV} -eq ${SHUNIT_TRUE} ]; then
+  _shunit_env_=$(env | sed 's!=!" value="!;s!^!<property name="!;s!$!"/>!')
+else
+  _shunit_env_=""
+fi
+
+# store the test suite execution date and start time
+__shunit_suite_timestamp=$(date -u '+%Y-%m-%dT%T')
+###__shunit_suite_starttime=$(date '+%s.%N')  ### MODIFIED BY ALevine - %N is not portable to MacOS
+__shunit_suite_starttime=$(date '+%s')
+
 # execute the tests
 _shunit_execSuite
 
+# store the test suite execution end time and duration
+###__shunit_suite_endtime=$(date '+%s.%N')  ### MODIFIED BY ALevine - %N is not portable to MacOS
+__shunit_suite_endtime=$(date '+%s')
+__shunit_suite_duration=$(echo ${__shunit_suite_endtime} - ${__shunit_suite_starttime} | bc)
+
 # execute the oneTimeTearDown function (if it exists)
-oneTimeTearDown
+oneTimeTearDown | tee -a ${__shunit_system_out} 2>&1
+
+# restore file descriptors
+#exec 1>&6 2>&7
+#exec 6>&- 7>&-
 
 # generate the report
-#     We bypass the report generation by shunit and rely on the
-#     report from the Perl script, difftoxml.
-##_shunit_generateReport
-  __shunit_reportGenerated=${SHUNIT_TRUE}
-#                 Make everybody happy as we bypass
+_shunit_generateFinalReport
+
 # that's it folks
-## [ ${__shunit_testsFailed} -eq 0 ]
-## exit $?
- exit 0
+SHUNIT_EXIT_NOW=1
+[ ${__shunit_testsFailed} -eq 0 ]
+exit $?
diff --git a/shunit2-2.1.6/src/shunit2_test.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test.sh
index f5a0ff8..d8f5a9c 100755
--- a/shunit2-2.1.6/src/shunit2_test.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test.sh 322 2011-04-24 00:09:45Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_asserts.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_asserts.sh
index 1f8040d..58f9e99 100755
--- a/shunit2-2.1.6/src/shunit2_test_asserts.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_asserts.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test_asserts.sh 312 2011-03-14 22:41:29Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_failures.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_failures.sh
index 4aec943..54bb149 100755
--- a/shunit2-2.1.6/src/shunit2_test_failures.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_failures.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test_failures.sh 286 2008-11-24 21:42:34Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_helpers b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_helpers
index 82a0eef..fc31c74 100644
--- a/shunit2-2.1.6/src/shunit2_test_helpers
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_helpers
@@ -1,4 +1,4 @@
-# $Id: shunit2_test_helpers 286 2008-11-24 21:42:34Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_macros.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_macros.sh
index 94fdbed..cac1378 100755
--- a/shunit2-2.1.6/src/shunit2_test_macros.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_macros.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test_macros.sh 299 2010-05-03 12:44:20Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_misc.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_misc.sh
index e3be229..863fbe9 100755
--- a/shunit2-2.1.6/src/shunit2_test_misc.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_misc.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test_misc.sh 322 2011-04-24 00:09:45Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2008 Kate Ward. All Rights Reserved.
diff --git a/shunit2-2.1.6/src/shunit2_test_standalone.sh b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_standalone.sh
index 6df64b3..2ac4725 100755
--- a/shunit2-2.1.6/src/shunit2_test_standalone.sh
+++ b/shunit2-2.1.6-JenkinsMod/src/shunit2_test_standalone.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# $Id: shunit2_test_standalone.sh 303 2010-05-03 13:11:27Z kate.ward@forestent.com $
+# $Id$
 # vim:et:ft=sh:sts=2:sw=2
 #
 # Copyright 2010 Kate Ward. All Rights Reserved.
