##       Instrumentation (debug) Subroutine
echoProgress () {
#   first parameter in Line Number
#   Second parameter is Suite name
                                       return    ######################################
echo "  Progress line $1 "
echo $2
git diff -- $2
echo "       ----"
}
##   End of subroutine
##          --- Beginning of MAIN ---

#
#    SST_ONE_OUTPUT_CONFIG     is the "one Suite" environment variable
#                  (Must be in the list below)
#
 
/bin/ls ../../devel/trunk > /dev/null 2>&1
retval=$?
if [ $retval != 0 ]
then 
    if [[ `pwd` == *devel/trunk* ]] ; then
        tBase=`pwd | awk -F'/devel/trunk' '{print $1}'`
        builtin cd $tBase/devel/trunk
    else
        echo ' '
        echo Wrong level in tree  `pwd`
        echo "Requires Jon's tree structure."
        exit
    fi
fi
pushd test/testSuites
if [ $? != 0 ] ; then
    echo "   ######################################################################## "
    echo "   cd failed    === needs to find test"
    echo "  Must be issue with Directory structure or pwd"
    echo "    PWD is `pwd`"
    echo "   ######################################################################## "
    exit 
fi

echo "   Modifying test Suites to write output-config python files and then test them"
echo "      Processing only listed Suites."
echo "      Not processing MultiThread or mpirun."

### testSuite_SweepEmber.sh    SPECIAL CASE
##     Not handled  (March 7, 2017)

for fn in  testSuite_Ariel.sh  testSuite_cassini_prefetch.sh  testSuite_check_maxrss.sh  testSuite_hybridsim.sh  testSuite_memHierarchy_sdl.sh  testSuite_merlin.sh testSuite_openMP.sh  testSuite_portals.sh  testSuite_prospero.sh  testSuite_scheduler.sh  testSuite_simpleComponent.sh  testSuite_SiriusZodiacTrace.sh  testSuite_VaultSim.sh testSuite_dirSweep.sh testSuite_embernightly.sh  testSuite_stream.sh testSuite_Sweep_openMP.sh testSuite_zoltan.sh testSuite_noncacheable_openMP.sh testSuite_cacheTracer.sh testSuite_chdlComponent.sh testSuite_dirnoncacheable_openMP.sh testSuite_memHSieve.sh testSuite_miranda.sh testSuite_partitioner.sh testSuite_simpleClockerComponent.sh testSuite_simpleDistribComponent.sh testSuite_simpleLookupTableComponent.sh testSuite_simpleMessageGeneratorComponent.sh testSuite_simpleRNGComponent.sh testSuite_simpleStatisticsComponent.sh testSuite_scheduler_DetailedNetwork.sh testSuite_CramSim.sh testSuite_memHA.sh
do 

if [[ ${SST_ONE_OUTPUT_CONFIG:+isSet} == isSet ]]
then 
    SUITE=${SST_ONE_OUTPUT_CONFIG}
    if [[ $fn == *${SUITE}* ]] ; then
        echo Doing only $fn
    else
        continue
    fi
fi

git checkout -- $fn          # Restore the Suite.

#		Remove parenthesis if needed
#
      sed '/sut.*sutArgs/s/(${sut}/${sut}/' $fn > __half-way
      diff $fn __half-way 
      if [ $? != 0 ] ; then
         sed '/sut.*sutArgs/s/)//' __half-way > $fn
         diff __half-way $fn
      fi
      rm __half-way

####   Get rid of mpirun statements (at least for now)
    sed -i'.x' 's/mpirun.*/echo MPIRUN purged/' $fn

### Look for Suites with no test
grep 'sut.*sutArgs' $fn > /dev/null
if [ $? != 0 ] ; then
    echo " ###################################################### "
    echo "       There is no recognized invocation of sst in $fn  "
    echo " ###################################################### "
    rm $fn      ### May be wrong thing to do
    echo  "rm \$fn      ### May be wrong thing to do"
    continue
fi
####  Add definitions
sed -i'.sg' '/outFile=/i \
    pyFile="${SST_TEST_INPUTS}/${testDataFileBase}.py" \
    errdiff="${SST_TEST_OUTPUTS}/${testDataFileBase}.errdiff" \
    errFilex="${SST_TEST_OUTPUTS}/${testDataFileBase}.errx" \
     ' $fn
echoProgress $LINENO $fn


####  Replace output destination info   
####      call for output config and init mode
sed -i'.x' '/sut.*sutArgs/s/sutArgs.*/sutArgs} --output-config $pyFile --run-mode init \> ${outFile}0 2>$errFilex/' $fn
echoProgress $LINENO $fn

#### Validation of created Python file
sed -i'.x' '/sut.*sutArgs/a \
if [ $? != 0 ] ; then \
     fail "Write of Python file from original input failed" \
     echo "      -------- stderr follows ----- "  \
     cat $errFilex \
     echo " " \
     wc ${outFile}0 \
     wc $pyFile \
     echo " - - - - - - - -   Abandoning  $testDataFileBase " \
     echo " " \
     return 1 \
fi \
echo "   New python file Generated:   ls, wc, and cksum" \
ls -l $pyFile \
if [ ! -s $pyFile ] ; then \
    fail " Python file not written" \
    return 1 \
fi \
wc $pyFile \
cksum $pyFile \
echo "Done with step 1 building pyFile" \
echo " " \
echo " Now test the generated python input file " \
    ' $fn
###  Insert redirection of STDOUT, if needed
grep 'errFile=' $fn  > /dev/null
if [ $? == 0 ] ; then    ##  Patch for errFile
sed -i'.x' '/Now test the generated python input file/a \
${sut} $pyFile > $outFile 2>$errFile  \
    ' $fn
else
sed -i'.x' '/Now test the generated python input file/a \
${sut} $pyFile > $outFile  \
    ' $fn
fi                      ## end of errFile patch

echoProgress $LINENO $fn

####    Augment the time limit
sed -i'.sh' 's/export SST_TEST_ONE_TEST_TIMEOUT=/export SST_TEST_ONE_TEST_TIMEOUT=1/' $fn

done
